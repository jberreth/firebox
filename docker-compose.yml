networks:
  firebox:
    driver: bridge
  monitoring:
    driver: bridge
  gateway:
    driver: bridge
    ipam:
      config:
        - subnet: 10.1.32.0/24

volumes:
  prometheus_data:
  grafana_data:
  postgres_data:
  traefik_data:
  # Gateway data volumes
  vigvis_data:
  cvsigdt1_data:
  cvsigdt2_data:
  vigds3_data:
  vigds4_data:
  vigdev_data:
  vigsvc_data:
  vigsvr_data:
  # Gateway backup volumes
  gateway_backups:

services:
  # Reverse Proxy and TLS Management
  traefik:
    image: traefik:v3.0
    container_name: firebox-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik:/etc/traefik:ro
      - traefik_data:/data
    environment:
      - TRAEFIK_LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - firebox
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: firebox-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-firebox}
      POSTGRES_USER: ${DB_USER:-firebox}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - firebox
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-firebox}"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: firebox-backend
    restart: unless-stopped
    ports:
      - "5000:5000"  # Direct port mapping for testing
    environment:
      - FLASK_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - DB_HOST=postgres
      - DB_NAME=${DB_NAME:-firebox}
      - DB_USER=${DB_USER:-firebox}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password}
      - HOST_IP=${HOST_IP}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - firebox
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${HOST_IP}.nip.io`)"
      - "traefik.http.services.api.loadbalancer.server.port=5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: firebox-frontend
    restart: unless-stopped
    ports:
      - "3000:80"  # Direct port mapping for testing
    environment:
      - REACT_APP_API_URL=http://192.168.1.38:5000
      - REACT_APP_GRAFANA_URL=https://grafana.${HOST_IP}.nip.io
    networks:
      - firebox
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-dashboard.rule=Host(`dashboard.${HOST_IP}.nip.io`)"
      - "traefik.http.services.frontend-dashboard.loadbalancer.server.port=80"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: firebox-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${HOST_IP}.nip.io`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    container_name: firebox-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=grafana.${HOST_IP}.nip.io
      - GF_SERVER_ROOT_URL=https://grafana.${HOST_IP}.nip.io
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
      - firebox
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${HOST_IP}.nip.io`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    depends_on:
      - prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: firebox-cadvisor
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: firebox-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Trial Reset Service
  trial-reset:
    build:
      context: ./scripts
      dockerfile: Dockerfile.selenium
    container_name: firebox-trial-reset
    restart: unless-stopped
    environment:
      - SELENIUM_HEADLESS=${SELENIUM_HEADLESS:-true}
      - SELENIUM_TIMEOUT=${SELENIUM_TIMEOUT:-30}
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
      - /dev/shm:/dev/shm
    networks:
      - firebox
    depends_on:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # IGNITION GATEWAY STACK
  # =============================================================================

  # VIGVIS - Visualization Gateway (Hub)
  vigvis:
    image: inductiveautomation/ignition:8.1.44
    container_name: firebox-vigvis
    hostname: vigvis
    restart: unless-stopped
    env_file:
      - ./config/common.env
      - ./config/network.env
      - ./config/gateways/VIGVIS.env
    ports:
      - "8071:8088"   # HTTP
      - "8471:8043"   # HTTPS  
      - "8671:8060"   # GAN
    volumes:
      - vigvis_data:/usr/local/bin/ignition/data
      - gateway_backups:/backups
      - ./config/gateways:/gateway-config:ro
    networks:
      firebox:
      gateway:
        ipv4_address: 10.1.32.71
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/StatusPing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vigvis.rule=Host(`vigvis.${HOST_IP}.nip.io`)"
      - "traefik.http.routers.vigvis.tls=true"
      - "traefik.http.services.vigvis.loadbalancer.server.port=8088"
      - "gateway.name=VIGVIS"
      - "gateway.type=visualization"
      - "gateway.role=hub"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # CVSIGDT1 - CVS Integration Gateway 1
  cvsigdt1:
    image: inductiveautomation/ignition:8.1.44
    container_name: firebox-cvsigdt1
    hostname: cvsigdt1
    restart: unless-stopped
    env_file:
      - ./config/common.env
      - ./config/network.env
      - ./config/gateways/CVSIGDT1.env
    ports:
      - "8051:8088"   # HTTP
      - "8451:8043"   # HTTPS
      - "8651:8060"   # GAN
    volumes:
      - cvsigdt1_data:/usr/local/bin/ignition/data
      - gateway_backups:/backups
      - ./config/gateways:/gateway-config:ro
    networks:
      firebox:
      gateway:
        ipv4_address: 10.1.32.51
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/StatusPing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cvsigdt1.rule=Host(`cvsigdt1.${HOST_IP}.nip.io`)"
      - "traefik.http.routers.cvsigdt1.tls=true"
      - "traefik.http.services.cvsigdt1.loadbalancer.server.port=8088"
      - "gateway.name=CVSIGDT1"
      - "gateway.type=integration"
      - "gateway.role=data_collection"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # CVSIGDT2 - CVS Integration Gateway 2
  cvsigdt2:
    image: inductiveautomation/ignition:8.1.44
    container_name: firebox-cvsigdt2
    hostname: cvsigdt2
    restart: unless-stopped
    env_file:
      - ./config/common.env
      - ./config/network.env
      - ./config/gateways/CVSIGDT2.env
    ports:
      - "8052:8088"   # HTTP
      - "8452:8043"   # HTTPS
      - "8652:8060"   # GAN
    volumes:
      - cvsigdt2_data:/usr/local/bin/ignition/data
      - gateway_backups:/backups
      - ./config/gateways:/gateway-config:ro
    networks:
      firebox:
      gateway:
        ipv4_address: 10.1.32.52
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/StatusPing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cvsigdt2.rule=Host(`cvsigdt2.${HOST_IP}.nip.io`)"
      - "traefik.http.routers.cvsigdt2.tls=true"
      - "traefik.http.services.cvsigdt2.loadbalancer.server.port=8088"
      - "gateway.name=CVSIGDT2"
      - "gateway.type=integration"
      - "gateway.role=data_collection"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # VIGDS3 - Datacenter Gateway 3
  vigds3:
    image: inductiveautomation/ignition:8.1.44
    container_name: firebox-vigds3
    hostname: vigds3
    restart: unless-stopped
    env_file:
      - ./config/common.env
      - ./config/network.env
      - ./config/gateways/VIGDS3.env
    ports:
      - "8053:8088"   # HTTP
      - "8453:8043"   # HTTPS
      - "8653:8060"   # GAN
    volumes:
      - vigds3_data:/usr/local/bin/ignition/data
      - gateway_backups:/backups
      - ./config/gateways:/gateway-config:ro
    networks:
      firebox:
      gateway:
        ipv4_address: 10.1.32.53
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/StatusPing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vigds3.rule=Host(`vigds3.${HOST_IP}.nip.io`)"
      - "traefik.http.routers.vigds3.tls=true"
      - "traefik.http.services.vigds3.loadbalancer.server.port=8088"
      - "gateway.name=VIGDS3"
      - "gateway.type=datacenter"
      - "gateway.role=monitoring"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # VIGDS4 - Datacenter Gateway 4
  vigds4:
    image: inductiveautomation/ignition:8.1.44
    container_name: firebox-vigds4
    hostname: vigds4
    restart: unless-stopped
    env_file:
      - ./config/common.env
      - ./config/network.env
      - ./config/gateways/VIGDS4.env
    ports:
      - "8054:8088"   # HTTP
      - "8454:8043"   # HTTPS
      - "8654:8060"   # GAN
    volumes:
      - vigds4_data:/usr/local/bin/ignition/data
      - gateway_backups:/backups
      - ./config/gateways:/gateway-config:ro
    networks:
      firebox:
      gateway:
        ipv4_address: 10.1.32.54
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/StatusPing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vigds4.rule=Host(`vigds4.${HOST_IP}.nip.io`)"
      - "traefik.http.routers.vigds4.tls=true"
      - "traefik.http.services.vigds4.loadbalancer.server.port=8088"
      - "gateway.name=VIGDS4"
      - "gateway.type=datacenter"
      - "gateway.role=monitoring"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # VIGDEV - Development Gateway
  vigdev:
    image: inductiveautomation/ignition:8.1.44
    container_name: firebox-vigdev
    hostname: vigdev
    restart: unless-stopped
    env_file:
      - ./config/common.env
      - ./config/network.env
      - ./config/gateways/VIGDEV.env
    ports:
      - "8070:8088"   # HTTP
      - "8470:8043"   # HTTPS
      - "8670:8060"   # GAN
    volumes:
      - vigdev_data:/usr/local/bin/ignition/data
      - gateway_backups:/backups
      - ./config/gateways:/gateway-config:ro
    networks:
      firebox:
      gateway:
        ipv4_address: 10.1.32.70
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/StatusPing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vigdev.rule=Host(`vigdev.${HOST_IP}.nip.io`)"
      - "traefik.http.routers.vigdev.tls=true"
      - "traefik.http.services.vigdev.loadbalancer.server.port=8088"
      - "gateway.name=VIGDEV"
      - "gateway.type=development"
      - "gateway.role=testing"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # VIGSVC - Service Gateway
  vigsvc:
    image: inductiveautomation/ignition:8.1.44
    container_name: firebox-vigsvc
    hostname: vigsvc
    restart: unless-stopped
    env_file:
      - ./config/common.env
      - ./config/network.env
      - ./config/gateways/VIGSVC.env
    ports:
      - "8073:8088"   # HTTP
      - "8473:8043"   # HTTPS
      - "8673:8060"   # GAN
    volumes:
      - vigsvc_data:/usr/local/bin/ignition/data
      - gateway_backups:/backups
      - ./config/gateways:/gateway-config:ro
    networks:
      firebox:
      gateway:
        ipv4_address: 10.1.32.73
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/StatusPing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vigsvc.rule=Host(`vigsvc.${HOST_IP}.nip.io`)"
      - "traefik.http.routers.vigsvc.tls=true"
      - "traefik.http.services.vigsvc.loadbalancer.server.port=8088"
      - "gateway.name=VIGSVC"
      - "gateway.type=service"
      - "gateway.role=coordination"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # VIGSVR - Server Gateway
  vigsvr:
    image: inductiveautomation/ignition:8.1.44
    container_name: firebox-vigsvr
    hostname: vigsvr
    restart: unless-stopped
    env_file:
      - ./config/common.env
      - ./config/network.env
      - ./config/gateways/VIGSVR.env
    ports:
      - "8072:8088"   # HTTP
      - "8472:8043"   # HTTPS
      - "8672:8060"   # GAN
    volumes:
      - vigsvr_data:/usr/local/bin/ignition/data
      - gateway_backups:/backups
      - ./config/gateways:/gateway-config:ro
    networks:
      firebox:
      gateway:
        ipv4_address: 10.1.32.72
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/StatusPing"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vigsvr.rule=Host(`vigsvr.${HOST_IP}.nip.io`)"
      - "traefik.http.routers.vigsvr.tls=true"
      - "traefik.http.services.vigsvr.loadbalancer.server.port=8088"
      - "gateway.name=VIGSVR"
      - "gateway.type=server"
      - "gateway.role=backend"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"